#!/bin/sh

LANG=C
export LANG

error_msg() {
    local msg="$1"
    [ -z "${msg}" ] && msg="Unknown error"
    printf "ERROR: %s\n" "${msg}" >&2
    exit 0
}

warn_msg() {
    local msg="$1"
    [ -z "${msg}" ] && msg="Unknown error"
    printf "WARNING: %s\n" "${msg}" >&2
}

info_msg() {
    local msg="$1"
    [ -z "${msg}" ] && msg="Unknown info"
    printf "INFO: %s\n" "${msg}" >&1
}

check_root() {
    if [ "$(id -ru)" -eq 0 ]; then
        return 0
    else
        return 1
    fi
}

exit_on_fail() {
    local exit_code="$?"
    [ "$#" -lt 1 ] && error_msg "Usage: exit_on_fail test [skip_list]"
    local test="$1"
    local skip_list="$2"

    if [ "${exit_code}" -ne 0 ]; then
        echo "${test} fail" | tee -a "${RESULT_FILE}"

        # skip_list is a list of tests sepereated by space. This might be
        # useful when exiting on prerequisite not met.
        if [ -n "${skip_list}" ]; then
            for i in ${skip_list}; do
                echo "$i skip" | tee -a "${RESULT_FILE}"
            done
        fi

        # Exit normally to continue to run the following steps defined in test
        # definition file.
        exit 0
    else
        echo "${test} pass" | tee -a "${RESULT_FILE}"
        return 0
    fi
}

check_return() {
    local exit_code="$?"
    [ "$#" -ne 1 ] && error_msg "Usage: check_return test"
    local test="$1"

    if [ "${exit_code}" -ne 0 ]; then
        echo "${test} fail" | tee -a "${RESULT_FILE}"
        return "${exit_code}"
    else
        echo "${test} pass" | tee -a "${RESULT_FILE}"
        return 0
    fi
}

report_pass() {
    [ "$#" -ne 1 ] && error_msg "Usage: report_pass test"
    local test="$1"
    echo "${test} pass" | tee -a "${RESULT_FILE}"
}

report_fail() {
    [ "$#" -ne 1 ] && error_msg "Usage: report_fail test"
    local test="$1"
    echo "${test} fail" | tee -a "${RESULT_FILE}"
}

add_metric() {
    if [ "$#" -ne 4 ]; then
        warn_msg "The number of parameters less then 4"
        error_msg "Usage: add_metric test result measurement units"
    fi
    local test="$1"
    local result="$2"
    local measurement="$3"
    local units="$4"

    echo "${test} ${result} ${measurement} ${units}" | tee -a "${RESULT_FILE}"
}

dist_name() {
    if [ -x /usr/bin/lsb_release ]; then
        dist="$(lsb_release -si)"
    elif [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        dist="${DISTRIB_ID}"
    elif [ -f /etc/debian_version ]; then
        dist="Debian"
    elif [ -f /etc/fedora-release ]; then
        dist="Fedora"
    elif [ -f /etc/centos-release ]; then
        dist="CentOS"
    else
        dist="Unknown"
        warn_msg "Unsupported distro: cannot determine distribution name"
    fi
}

install_deps() {
    local pkgs="$1"
    [ -z "${pkgs}" ] && error_msg "Usage: install_deps pkgs"
    # skip_install parmater is optional.
    local skip_install="$2"

    if [ "${skip_install}" = "True" ] || [ "${skip_install}" = "true" ]; then
        info_msg "install_deps skipped"
    else
        info_msg "Installing ${pkgs}"
        dist_name
        case "${dist}" in
          Debian|Ubuntu)
            # Use the default answers for all questions.
            DEBIAN_FRONTEND=noninteractive apt-get update -q -y
            # shellcheck disable=SC2086
            DEBIAN_FRONTEND=noninteractive apt-get install -q -y ${pkgs}
            ;;
          CentOS)
            # shellcheck disable=SC2086
            yum -e 0 -y install ${pkgs}
            ;;
          Fedora)
            # shellcheck disable=SC2086
            dnf -e 0 -y install ${pkgs}
            ;;
          Unknown)
            warn_msg "Unsupported distro: package install skipped"
            ;;
        esac
    fi
}

# Return the exit code of the first command when using pipe.
pipe0_status() {
    [ "$#" -ne 2 ] && error_msg "Usage: pipe0_status cmd1 cmd2"
    local cmd1="$1"
    local cmd2="$2"

    exec 4>&1
    ret_val=$({ { eval "${cmd1}" 3>&-; echo "$?" 1>&3; } 4>&- \
                | eval "${cmd2}" 1>&4; } 3>&1)
    exec 4>&-

    return "${ret_val}"
}

validate_check_sum() {
    if [ "$#" -ne 2 ]; then
        warn_msg "The number of parameters should be 2"
        error_msg "Usage: validate_check_sum filename known_sha256sum"
        return 1
    fi
    OUTPUT_FILE_NAME="$1"
    SHA256SUM_CHECK="$2"
    # Get sha256sum of output_file
    GET_SHA256SUM=$(sha256sum "${OUTPUT_FILE_NAME}" | awk '{print $1}')
    echo "GET_SHA256SUM is ${GET_SHA256SUM}"
    if [ "${SHA256SUM_CHECK}" = "${GET_SHA256SUM}" ] ; then
        return 0
    else
        echo "checksum did not match"
        return 1
    fi
}

dist_info() {
    if ! command -v lsb_release > /dev/null; then
        dist_name
        case "${dist}" in
          Debian|Ubuntu) install_deps "lsb-release" ;;
          CentOS|Fedora) install_deps "redhat-lsb-core" ;;
          *) error_msg "Unsupported distro: dist_info skipped"
        esac
    fi

    # shellcheck disable=SC2034
    Release=$(lsb_release -r | awk '{print $2}')
    Codename=$(lsb_release -c | awk '{print $2}')
}


add_key() {
    [ "$#" -ne 1 ] && error_msg "Usage: add_key url"
    local url="$1"

    dist_name
    case "${dist}" in
      Debian|Ubuntu) wget -O - "${url}" | apt-key add - ;;
      CentOS|Fedora) infor_msg "add_key isn't needed on ${dist}" ;;
      *) error_msg "Unsupported distro: add_key skipped"
    esac
}

add_repo() {
    [ "$#" -lt 1 ] && error_msg "Usage: add_repo <url> [backports]"
    local url="$1"

    dist_name
    case "${dist}" in
      # Detect Debian/Ubuntu codename and add repo automatically. The same url
      # should work on all distributions supported by the repo.
      Debian|Ubuntu)
        dist_info
        if [ "$2" != "backports" ]; then
            echo "deb ${url} ${Codename} main" \
                >> "/etc/apt/sources.list.d/3rd-party-repo.list"
        else
            echo "deb ${url} ${Codename}-backports main" \
                >> "/etc/apt/sources.list.d/3rd-party-repo.list"
        fi
        ;;
      # It is not easy to amend url with distro version as its format may vary
      # by repo. Test definition/plan should provide a correct repo url.
      CentOS|Fedora)
        wget -O - "${url}" >> "/etc/yum.repos.d/3rd-party.repo"
        ;;
      *)
        error_msg "Unsupported distro: add_repo skipped"
        ;;
   esac
}
